name: Deploy Backend to Host
on:
  push:
    branches:
      - main
jobs:
  docker-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. 配置 Java 环境
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      # 3. Maven 构建
      - name: Run Maven Build
        run: |
          mvn clean install -DskipTests -B
          mkdir -p target/dependency && (cd target/dependency; unzip ../*.jar)

      # 4. 配置 Docker 构建环境
      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 登录 Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v3  # 升级到最新版
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 6. 构建并推送镜像
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: 20232076/234-deploylab-backend:latest  # 替换为你的 Docker Hub 用户名

      # 7. 修复 SSH 认证：使用最新版 Action + 显式配置私钥
      - name: Copy docker-compose via SCP (Fixed SSH)
        uses: appleboy/scp-action@v1.0.0  # 升级到较新版本
        with:
          host: ${{ secrets.HOST_SERVER }}
          username: ${{ secrets.HOST_USER_NAME }}
          key: ${{ secrets.HOST_SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/backend"
          # 新增：显式指定私钥格式（可选，解决旧版本兼容问题）
          key_format: "pem"

      # 8. 远程运行 Docker Compose（同步升级 Action 版本）
      - name: Run Docker Compose on Server (Fixed SSH)
        uses: appleboy/ssh-action@v1.0.0  # 升级到较新版本
        with:
          host: ${{ secrets.HOST_SERVER }}
          username: ${{ secrets.HOST_USER_NAME }}
          key: ${{ secrets.HOST_SSH_PRIVATE_KEY }}
          port: 22
          key_format: "pem"  # 显式指定私钥格式
          script: |
            cd /home/ubuntu/backend
            echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            docker compose down
            docker compose pull
            docker compose up -d
            rm -rf /home/ubuntu/backend